#!/usr/bin/perl -Ilib -I../lib

use Modern::Perl;

{

    package CompareRegisteredVoters;
    use Moo;
    use MooX::Options;
    use MooX::Types::MooseLike::Base qw( :all );
    use FOEGCL::GOTV::VoterStore;
    use FOEGCL::GOTV::VoterProvider;
    use FOEGCL::GOTV::MembershipProvider;
    use FOEGCL::Logger;
    use Carp qw( croak );

    option membership_csv => (
        is     => 'ro',
        format => 's',
        doc    => 'path/to/friends/membership/file.csv',
        isa    => sub {
            ## no critic (RequireCarping, ProhibitUselessTopic)
            die 'Membership CSV must be a file readable to the current user.'
              unless -e $_[0] && -f $_[0] && -r $_[0];
            ## use critic
        },
        required => 1,
    );

    option voter_csv => (
        is     => 'ro',
        format => 's',
        doc    => 'path/to/voter/file.csv',
        isa    => sub {
            ## no critic (RequireCarping, ProhibitUselessTopic)
            die 'Voter CSV must be a file readable to the current user.'
              unless -e $_[0] && -f $_[0] && -r $_[0];
            ## use critic
        },
        required => 1,
    );

    option logfile => (
        is     => 'ro',
        format => 's',
        doc    => 'path/to/outfile',
        isa    => sub {
            ## no critic (RequireCarping, ProhibitUselessTopic)
            die 'If logfile exists already, it must be a file writable by you.'
              if ( -e $_[0] ) && ( !-f $_[0] || !-w $_[0] );
            ## use critic
        },
        builder => 1,
    );

    has _voter_store => (
        is      => 'ro',
        isa     => InstanceOf ['FOEGCL::GOTV::VoterStore'],
        builder => 1,
    );
    has _voter_provider => (
        is      => 'ro',
        isa     => InstanceOf ['FOEGCL::GOTV::VoterProvider'],
        lazy    => 1,
        builder => 1,
    );
    has _membership_provider => (
        is      => 'ro',
        isa     => InstanceOf ['FOEGCL::GOTV::MembershipProvider'],
        lazy    => 1,
        builder => 1,
    );
    has _logger => (
        is      => 'ro',
        isa     => InstanceOf ['FOEGCL::Logger'],
        lazy    => 1,
        builder => 1,
    );

    sub _build__voter_store {
        my $self = shift;

        return FOEGCL::GOTV::VoterStore->new;
    }

    sub _build__voter_provider {
        my $self = shift;

        return FOEGCL::GOTV::VoterProvider->new( datafile => $self->voter_csv );
    }

    sub _build__membership_provider {
        my $self = shift;

        return FOEGCL::GOTV::MembershipProvider->new(
            datafile => $self->membership_csv );
    }

    sub _build_logfile {
        return 'compare-registered-voters.log';
    }

    sub _build__logger {
        my $self = shift;

        return FOEGCL::Logger->new( logfile => $self->logfile );
    }

    sub run {
        my $self = shift;

        # Read voters into memory
        while ( my $voter = $self->_voter_provider->next_record ) {
            $self->_voter_store->add_voter($voter);
        }

        # For each membership, verify registered voter status
        while ( my $membership = $self->_membership_provider->next_record ) {
            if ( $membership->has_registered_voter ) {
                $self->_attempt_registered_voter_match($membership);
            }
            else {
                $self->_attempt_nonregistered_voter_match($membership);
            }
        }

        return;
    }

    sub _attempt_registered_voter_match {
        my $self       = shift;
        my $membership = shift;

        if (
            $self->_voter_store->any_friends_match_direct(
                @{ $membership->registered_voter_friends }
            )
            || $self->_voter_store->any_friends_match_assisted(
                @{ $membership->registered_voter_friends }
            )
          )
        {
            $self->_logger->add( $membership->membership_id . ' Perfect.' );
        }
        else {
            $self->_logger->add( $membership->membership_id
                  . ' Check: Voter registration record not found, but expected.'
            );
        }

        return;
    }

    sub _attempt_nonregistered_voter_match {
        my $self       = shift;
        my $membership = shift;

        if (
            $self->_voter_store->any_friends_match_direct(
                @{ $membership->friends }
            )
            || $self->_voter_store->any_friends_match_assisted(
                @{ $membership->friends }
            )
          )
        {
            $self->_logger->add( $membership->membership_id
                  . ' Check: Voter registration record found, but not expected.'
            );
        }
        else {
            $self->_logger->add( $membership->membership_id
                  . ' Confirm: No voter registration record found, and none expected.'
            );
        }

        return;
    }

    1;
}

CompareRegisteredVoters->new_with_options()->run();

__END__

=head1 NAME

compare-registered-voters -
    Compare Friends' voter registration statuses against the voter registration roll

=head1 SYNOPSIS

compare-registered-voters [-h] [long options...]

    --membership_csv=String  path/to/friends/membership/file.csv
    --voter_csv=String       path/to/voter/file.csv
    --logfile=String         path/to/outfile

    --usage                  show a short help message
    -h                       show a compact help message
    --help                   show a long help message
    --man                    show the manual

=head1 OPTIONS

=over 8

=item B<--usage>

Prints the usage and exits.

=item B<-h>

Prints a short help message and exits.

=item B<--help>

Prints a log help message and exits.

=item B<--man>

Prints the manual and exits.

=item B<--membership_csv>

Specify the path to the Friends' Membership CSV. File should have Unix line
endings, include a header line, and have the following column arrangement:

    1. Friend ID
    2. First Name
    3. Last Name
    4. Spouse First Name
    5. Spouse Last Name
    6. Street Address
    7. Registered Voter (TRUE/FALSE)
    8. ZIP Code
    
This file can be generated by exporting the Friends table from the MS Access
database.

=item B<--voter_csv>

Specify the path to the Voter Registration CSV. File should have Unix line
endings, include a header line, and have the following column arrangement:

    1. Voter Registration ID
    2. First Name
    4. Last Name
    6. Street Number
    8. Street Name
    9. Apartment Number
    14. ZIP Code
    
This file can be obtained by asking Jill to contact someone.

=item B<--logfile>

Specify a path for the program to write its output. 

=back

=head1 DESCRIPTION

Part of the FOEGCL distribution. This program will compare the voter
registration status of all Friends against a voter registration roll, and
recommend updates for the Friends' Membership database. Recommended changes
should be reviewed by humans to ensure validity, and to maximize the potential
reach of the Friends' Get Out the Vote campaign.

This program looks for matches between Friends and Voters using first name,
last name, street address and ZIP Code. In addition to standardizing the
street addresses in accordance with USPS Publication 28 for comparison, it also
asks the user to help it determine whether a match can be made for situations
where names match between the Friends and Voters, but street addresses do not.

This program was created to reduce the amount of manual work required to
accomplish this task. In 2016, this program was used to check the status of 650
memberships' voter registration statuses. About 550 were found to agree, leaving
about 100 left for human comparison. Sometimes spelling of names or street
addresses don't match between the two data sets, or sometimes people have moved
away and registered to vote elsewhere.

